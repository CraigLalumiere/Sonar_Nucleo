// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigPlot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ConfigPlot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ConfigPlot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ConfigPlot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ConfigPlot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ConfigPlot_2eproto;
class ConfigPlot;
class ConfigPlotDefaultTypeInternal;
extern ConfigPlotDefaultTypeInternal _ConfigPlot_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ConfigPlot* Arena::CreateMaybeMessage<::ConfigPlot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ConfigPlot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConfigPlot) */ {
 public:
  inline ConfigPlot() : ConfigPlot(nullptr) {};
  virtual ~ConfigPlot();

  ConfigPlot(const ConfigPlot& from);
  ConfigPlot(ConfigPlot&& from) noexcept
    : ConfigPlot() {
    *this = ::std::move(from);
  }

  inline ConfigPlot& operator=(const ConfigPlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigPlot& operator=(ConfigPlot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigPlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigPlot* internal_default_instance() {
    return reinterpret_cast<const ConfigPlot*>(
               &_ConfigPlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigPlot& a, ConfigPlot& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigPlot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigPlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigPlot* New() const final {
    return CreateMaybeMessage<ConfigPlot>(nullptr);
  }

  ConfigPlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigPlot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigPlot& from);
  void MergeFrom(const ConfigPlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigPlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConfigPlot";
  }
  protected:
  explicit ConfigPlot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ConfigPlot_2eproto);
    return ::descriptor_table_ConfigPlot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlotTitleFieldNumber = 2,
    kXLabelFieldNumber = 3,
    kXUnitsFieldNumber = 4,
    kYLabelFieldNumber = 5,
    kYUnitsFieldNumber = 6,
    kPlotNumberFieldNumber = 1,
  };
  // required string plot_title = 2;
  bool has_plot_title() const;
  private:
  bool _internal_has_plot_title() const;
  public:
  void clear_plot_title();
  const std::string& plot_title() const;
  void set_plot_title(const std::string& value);
  void set_plot_title(std::string&& value);
  void set_plot_title(const char* value);
  void set_plot_title(const char* value, size_t size);
  std::string* mutable_plot_title();
  std::string* release_plot_title();
  void set_allocated_plot_title(std::string* plot_title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_plot_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_plot_title(
      std::string* plot_title);
  private:
  const std::string& _internal_plot_title() const;
  void _internal_set_plot_title(const std::string& value);
  std::string* _internal_mutable_plot_title();
  public:

  // required string x_label = 3;
  bool has_x_label() const;
  private:
  bool _internal_has_x_label() const;
  public:
  void clear_x_label();
  const std::string& x_label() const;
  void set_x_label(const std::string& value);
  void set_x_label(std::string&& value);
  void set_x_label(const char* value);
  void set_x_label(const char* value, size_t size);
  std::string* mutable_x_label();
  std::string* release_x_label();
  void set_allocated_x_label(std::string* x_label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_x_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_x_label(
      std::string* x_label);
  private:
  const std::string& _internal_x_label() const;
  void _internal_set_x_label(const std::string& value);
  std::string* _internal_mutable_x_label();
  public:

  // required string x_units = 4;
  bool has_x_units() const;
  private:
  bool _internal_has_x_units() const;
  public:
  void clear_x_units();
  const std::string& x_units() const;
  void set_x_units(const std::string& value);
  void set_x_units(std::string&& value);
  void set_x_units(const char* value);
  void set_x_units(const char* value, size_t size);
  std::string* mutable_x_units();
  std::string* release_x_units();
  void set_allocated_x_units(std::string* x_units);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_x_units();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_x_units(
      std::string* x_units);
  private:
  const std::string& _internal_x_units() const;
  void _internal_set_x_units(const std::string& value);
  std::string* _internal_mutable_x_units();
  public:

  // required string y_label = 5;
  bool has_y_label() const;
  private:
  bool _internal_has_y_label() const;
  public:
  void clear_y_label();
  const std::string& y_label() const;
  void set_y_label(const std::string& value);
  void set_y_label(std::string&& value);
  void set_y_label(const char* value);
  void set_y_label(const char* value, size_t size);
  std::string* mutable_y_label();
  std::string* release_y_label();
  void set_allocated_y_label(std::string* y_label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_y_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_y_label(
      std::string* y_label);
  private:
  const std::string& _internal_y_label() const;
  void _internal_set_y_label(const std::string& value);
  std::string* _internal_mutable_y_label();
  public:

  // required string y_units = 6;
  bool has_y_units() const;
  private:
  bool _internal_has_y_units() const;
  public:
  void clear_y_units();
  const std::string& y_units() const;
  void set_y_units(const std::string& value);
  void set_y_units(std::string&& value);
  void set_y_units(const char* value);
  void set_y_units(const char* value, size_t size);
  std::string* mutable_y_units();
  std::string* release_y_units();
  void set_allocated_y_units(std::string* y_units);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_y_units();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_y_units(
      std::string* y_units);
  private:
  const std::string& _internal_y_units() const;
  void _internal_set_y_units(const std::string& value);
  std::string* _internal_mutable_y_units();
  public:

  // required uint32 plot_number = 1;
  bool has_plot_number() const;
  private:
  bool _internal_has_plot_number() const;
  public:
  void clear_plot_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 plot_number() const;
  void set_plot_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_plot_number() const;
  void _internal_set_plot_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ConfigPlot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plot_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_units_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_units_;
  ::PROTOBUF_NAMESPACE_ID::uint32 plot_number_;
  friend struct ::TableStruct_ConfigPlot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigPlot

// required uint32 plot_number = 1;
inline bool ConfigPlot::_internal_has_plot_number() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConfigPlot::has_plot_number() const {
  return _internal_has_plot_number();
}
inline void ConfigPlot::clear_plot_number() {
  plot_number_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConfigPlot::_internal_plot_number() const {
  return plot_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConfigPlot::plot_number() const {
  // @@protoc_insertion_point(field_get:ConfigPlot.plot_number)
  return _internal_plot_number();
}
inline void ConfigPlot::_internal_set_plot_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  plot_number_ = value;
}
inline void ConfigPlot::set_plot_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_plot_number(value);
  // @@protoc_insertion_point(field_set:ConfigPlot.plot_number)
}

// required string plot_title = 2;
inline bool ConfigPlot::_internal_has_plot_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfigPlot::has_plot_title() const {
  return _internal_has_plot_title();
}
inline void ConfigPlot::clear_plot_title() {
  plot_title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConfigPlot::plot_title() const {
  // @@protoc_insertion_point(field_get:ConfigPlot.plot_title)
  return _internal_plot_title();
}
inline void ConfigPlot::set_plot_title(const std::string& value) {
  _internal_set_plot_title(value);
  // @@protoc_insertion_point(field_set:ConfigPlot.plot_title)
}
inline std::string* ConfigPlot::mutable_plot_title() {
  // @@protoc_insertion_point(field_mutable:ConfigPlot.plot_title)
  return _internal_mutable_plot_title();
}
inline const std::string& ConfigPlot::_internal_plot_title() const {
  return plot_title_.Get();
}
inline void ConfigPlot::_internal_set_plot_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  plot_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigPlot::set_plot_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  plot_title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigPlot.plot_title)
}
inline void ConfigPlot::set_plot_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  plot_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigPlot.plot_title)
}
inline void ConfigPlot::set_plot_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  plot_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigPlot.plot_title)
}
inline std::string* ConfigPlot::_internal_mutable_plot_title() {
  _has_bits_[0] |= 0x00000001u;
  return plot_title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigPlot::release_plot_title() {
  // @@protoc_insertion_point(field_release:ConfigPlot.plot_title)
  if (!_internal_has_plot_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return plot_title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigPlot::set_allocated_plot_title(std::string* plot_title) {
  if (plot_title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plot_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plot_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigPlot.plot_title)
}
inline std::string* ConfigPlot::unsafe_arena_release_plot_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConfigPlot.plot_title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return plot_title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfigPlot::unsafe_arena_set_allocated_plot_title(
    std::string* plot_title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (plot_title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plot_title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      plot_title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConfigPlot.plot_title)
}

// required string x_label = 3;
inline bool ConfigPlot::_internal_has_x_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConfigPlot::has_x_label() const {
  return _internal_has_x_label();
}
inline void ConfigPlot::clear_x_label() {
  x_label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConfigPlot::x_label() const {
  // @@protoc_insertion_point(field_get:ConfigPlot.x_label)
  return _internal_x_label();
}
inline void ConfigPlot::set_x_label(const std::string& value) {
  _internal_set_x_label(value);
  // @@protoc_insertion_point(field_set:ConfigPlot.x_label)
}
inline std::string* ConfigPlot::mutable_x_label() {
  // @@protoc_insertion_point(field_mutable:ConfigPlot.x_label)
  return _internal_mutable_x_label();
}
inline const std::string& ConfigPlot::_internal_x_label() const {
  return x_label_.Get();
}
inline void ConfigPlot::_internal_set_x_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  x_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigPlot::set_x_label(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  x_label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigPlot.x_label)
}
inline void ConfigPlot::set_x_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  x_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigPlot.x_label)
}
inline void ConfigPlot::set_x_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  x_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigPlot.x_label)
}
inline std::string* ConfigPlot::_internal_mutable_x_label() {
  _has_bits_[0] |= 0x00000002u;
  return x_label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigPlot::release_x_label() {
  // @@protoc_insertion_point(field_release:ConfigPlot.x_label)
  if (!_internal_has_x_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return x_label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigPlot::set_allocated_x_label(std::string* x_label) {
  if (x_label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  x_label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x_label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigPlot.x_label)
}
inline std::string* ConfigPlot::unsafe_arena_release_x_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConfigPlot.x_label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return x_label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfigPlot::unsafe_arena_set_allocated_x_label(
    std::string* x_label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (x_label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  x_label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      x_label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConfigPlot.x_label)
}

// required string x_units = 4;
inline bool ConfigPlot::_internal_has_x_units() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConfigPlot::has_x_units() const {
  return _internal_has_x_units();
}
inline void ConfigPlot::clear_x_units() {
  x_units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConfigPlot::x_units() const {
  // @@protoc_insertion_point(field_get:ConfigPlot.x_units)
  return _internal_x_units();
}
inline void ConfigPlot::set_x_units(const std::string& value) {
  _internal_set_x_units(value);
  // @@protoc_insertion_point(field_set:ConfigPlot.x_units)
}
inline std::string* ConfigPlot::mutable_x_units() {
  // @@protoc_insertion_point(field_mutable:ConfigPlot.x_units)
  return _internal_mutable_x_units();
}
inline const std::string& ConfigPlot::_internal_x_units() const {
  return x_units_.Get();
}
inline void ConfigPlot::_internal_set_x_units(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  x_units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigPlot::set_x_units(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  x_units_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigPlot.x_units)
}
inline void ConfigPlot::set_x_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  x_units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigPlot.x_units)
}
inline void ConfigPlot::set_x_units(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  x_units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigPlot.x_units)
}
inline std::string* ConfigPlot::_internal_mutable_x_units() {
  _has_bits_[0] |= 0x00000004u;
  return x_units_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigPlot::release_x_units() {
  // @@protoc_insertion_point(field_release:ConfigPlot.x_units)
  if (!_internal_has_x_units()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return x_units_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigPlot::set_allocated_x_units(std::string* x_units) {
  if (x_units != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  x_units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x_units,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigPlot.x_units)
}
inline std::string* ConfigPlot::unsafe_arena_release_x_units() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConfigPlot.x_units)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return x_units_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfigPlot::unsafe_arena_set_allocated_x_units(
    std::string* x_units) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (x_units != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  x_units_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      x_units, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConfigPlot.x_units)
}

// required string y_label = 5;
inline bool ConfigPlot::_internal_has_y_label() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConfigPlot::has_y_label() const {
  return _internal_has_y_label();
}
inline void ConfigPlot::clear_y_label() {
  y_label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ConfigPlot::y_label() const {
  // @@protoc_insertion_point(field_get:ConfigPlot.y_label)
  return _internal_y_label();
}
inline void ConfigPlot::set_y_label(const std::string& value) {
  _internal_set_y_label(value);
  // @@protoc_insertion_point(field_set:ConfigPlot.y_label)
}
inline std::string* ConfigPlot::mutable_y_label() {
  // @@protoc_insertion_point(field_mutable:ConfigPlot.y_label)
  return _internal_mutable_y_label();
}
inline const std::string& ConfigPlot::_internal_y_label() const {
  return y_label_.Get();
}
inline void ConfigPlot::_internal_set_y_label(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  y_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigPlot::set_y_label(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  y_label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigPlot.y_label)
}
inline void ConfigPlot::set_y_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  y_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigPlot.y_label)
}
inline void ConfigPlot::set_y_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  y_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigPlot.y_label)
}
inline std::string* ConfigPlot::_internal_mutable_y_label() {
  _has_bits_[0] |= 0x00000008u;
  return y_label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigPlot::release_y_label() {
  // @@protoc_insertion_point(field_release:ConfigPlot.y_label)
  if (!_internal_has_y_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return y_label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigPlot::set_allocated_y_label(std::string* y_label) {
  if (y_label != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  y_label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), y_label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigPlot.y_label)
}
inline std::string* ConfigPlot::unsafe_arena_release_y_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConfigPlot.y_label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return y_label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfigPlot::unsafe_arena_set_allocated_y_label(
    std::string* y_label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (y_label != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  y_label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      y_label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConfigPlot.y_label)
}

// required string y_units = 6;
inline bool ConfigPlot::_internal_has_y_units() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConfigPlot::has_y_units() const {
  return _internal_has_y_units();
}
inline void ConfigPlot::clear_y_units() {
  y_units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ConfigPlot::y_units() const {
  // @@protoc_insertion_point(field_get:ConfigPlot.y_units)
  return _internal_y_units();
}
inline void ConfigPlot::set_y_units(const std::string& value) {
  _internal_set_y_units(value);
  // @@protoc_insertion_point(field_set:ConfigPlot.y_units)
}
inline std::string* ConfigPlot::mutable_y_units() {
  // @@protoc_insertion_point(field_mutable:ConfigPlot.y_units)
  return _internal_mutable_y_units();
}
inline const std::string& ConfigPlot::_internal_y_units() const {
  return y_units_.Get();
}
inline void ConfigPlot::_internal_set_y_units(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  y_units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigPlot::set_y_units(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  y_units_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ConfigPlot.y_units)
}
inline void ConfigPlot::set_y_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  y_units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ConfigPlot.y_units)
}
inline void ConfigPlot::set_y_units(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  y_units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ConfigPlot.y_units)
}
inline std::string* ConfigPlot::_internal_mutable_y_units() {
  _has_bits_[0] |= 0x00000010u;
  return y_units_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigPlot::release_y_units() {
  // @@protoc_insertion_point(field_release:ConfigPlot.y_units)
  if (!_internal_has_y_units()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return y_units_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigPlot::set_allocated_y_units(std::string* y_units) {
  if (y_units != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  y_units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), y_units,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ConfigPlot.y_units)
}
inline std::string* ConfigPlot::unsafe_arena_release_y_units() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ConfigPlot.y_units)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return y_units_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfigPlot::unsafe_arena_set_allocated_y_units(
    std::string* y_units) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (y_units != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  y_units_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      y_units, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ConfigPlot.y_units)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ConfigPlot_2eproto
