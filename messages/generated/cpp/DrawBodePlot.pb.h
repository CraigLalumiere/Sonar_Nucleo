// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DrawBodePlot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DrawBodePlot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DrawBodePlot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DrawBodePlot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DrawBodePlot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DrawBodePlot_2eproto;
class DrawBodePlot;
class DrawBodePlotDefaultTypeInternal;
extern DrawBodePlotDefaultTypeInternal _DrawBodePlot_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DrawBodePlot* Arena::CreateMaybeMessage<::DrawBodePlot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DrawBodePlot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DrawBodePlot) */ {
 public:
  inline DrawBodePlot() : DrawBodePlot(nullptr) {};
  virtual ~DrawBodePlot();

  DrawBodePlot(const DrawBodePlot& from);
  DrawBodePlot(DrawBodePlot&& from) noexcept
    : DrawBodePlot() {
    *this = ::std::move(from);
  }

  inline DrawBodePlot& operator=(const DrawBodePlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawBodePlot& operator=(DrawBodePlot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawBodePlot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawBodePlot* internal_default_instance() {
    return reinterpret_cast<const DrawBodePlot*>(
               &_DrawBodePlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DrawBodePlot& a, DrawBodePlot& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawBodePlot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawBodePlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawBodePlot* New() const final {
    return CreateMaybeMessage<DrawBodePlot>(nullptr);
  }

  DrawBodePlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawBodePlot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawBodePlot& from);
  void MergeFrom(const DrawBodePlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawBodePlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DrawBodePlot";
  }
  protected:
  explicit DrawBodePlot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrawBodePlot_2eproto);
    return ::descriptor_table_DrawBodePlot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFreqFieldNumber = 3,
    kDataMagFieldNumber = 4,
    kDataPhaseFieldNumber = 5,
    kDataLabelFieldNumber = 2,
    kPlotNumberFieldNumber = 1,
  };
  // repeated float data_freq = 3 [packed = true];
  int data_freq_size() const;
  private:
  int _internal_data_freq_size() const;
  public:
  void clear_data_freq();
  private:
  float _internal_data_freq(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data_freq() const;
  void _internal_add_data_freq(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data_freq();
  public:
  float data_freq(int index) const;
  void set_data_freq(int index, float value);
  void add_data_freq(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data_freq() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data_freq();

  // repeated float data_mag = 4 [packed = true];
  int data_mag_size() const;
  private:
  int _internal_data_mag_size() const;
  public:
  void clear_data_mag();
  private:
  float _internal_data_mag(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data_mag() const;
  void _internal_add_data_mag(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data_mag();
  public:
  float data_mag(int index) const;
  void set_data_mag(int index, float value);
  void add_data_mag(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data_mag() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data_mag();

  // repeated float data_phase = 5 [packed = true];
  int data_phase_size() const;
  private:
  int _internal_data_phase_size() const;
  public:
  void clear_data_phase();
  private:
  float _internal_data_phase(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data_phase() const;
  void _internal_add_data_phase(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data_phase();
  public:
  float data_phase(int index) const;
  void set_data_phase(int index, float value);
  void add_data_phase(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data_phase() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data_phase();

  // required string data_label = 2;
  bool has_data_label() const;
  private:
  bool _internal_has_data_label() const;
  public:
  void clear_data_label();
  const std::string& data_label() const;
  void set_data_label(const std::string& value);
  void set_data_label(std::string&& value);
  void set_data_label(const char* value);
  void set_data_label(const char* value, size_t size);
  std::string* mutable_data_label();
  std::string* release_data_label();
  void set_allocated_data_label(std::string* data_label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data_label(
      std::string* data_label);
  private:
  const std::string& _internal_data_label() const;
  void _internal_set_data_label(const std::string& value);
  std::string* _internal_mutable_data_label();
  public:

  // required uint32 plot_number = 1;
  bool has_plot_number() const;
  private:
  bool _internal_has_plot_number() const;
  public:
  void clear_plot_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 plot_number() const;
  void set_plot_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_plot_number() const;
  void _internal_set_plot_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DrawBodePlot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_freq_;
  mutable std::atomic<int> _data_freq_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_mag_;
  mutable std::atomic<int> _data_mag_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_phase_;
  mutable std::atomic<int> _data_phase_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 plot_number_;
  friend struct ::TableStruct_DrawBodePlot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DrawBodePlot

// required uint32 plot_number = 1;
inline bool DrawBodePlot::_internal_has_plot_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrawBodePlot::has_plot_number() const {
  return _internal_has_plot_number();
}
inline void DrawBodePlot::clear_plot_number() {
  plot_number_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrawBodePlot::_internal_plot_number() const {
  return plot_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrawBodePlot::plot_number() const {
  // @@protoc_insertion_point(field_get:DrawBodePlot.plot_number)
  return _internal_plot_number();
}
inline void DrawBodePlot::_internal_set_plot_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  plot_number_ = value;
}
inline void DrawBodePlot::set_plot_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_plot_number(value);
  // @@protoc_insertion_point(field_set:DrawBodePlot.plot_number)
}

// required string data_label = 2;
inline bool DrawBodePlot::_internal_has_data_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrawBodePlot::has_data_label() const {
  return _internal_has_data_label();
}
inline void DrawBodePlot::clear_data_label() {
  data_label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DrawBodePlot::data_label() const {
  // @@protoc_insertion_point(field_get:DrawBodePlot.data_label)
  return _internal_data_label();
}
inline void DrawBodePlot::set_data_label(const std::string& value) {
  _internal_set_data_label(value);
  // @@protoc_insertion_point(field_set:DrawBodePlot.data_label)
}
inline std::string* DrawBodePlot::mutable_data_label() {
  // @@protoc_insertion_point(field_mutable:DrawBodePlot.data_label)
  return _internal_mutable_data_label();
}
inline const std::string& DrawBodePlot::_internal_data_label() const {
  return data_label_.Get();
}
inline void DrawBodePlot::_internal_set_data_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DrawBodePlot::set_data_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DrawBodePlot.data_label)
}
inline void DrawBodePlot::set_data_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DrawBodePlot.data_label)
}
inline void DrawBodePlot::set_data_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DrawBodePlot.data_label)
}
inline std::string* DrawBodePlot::_internal_mutable_data_label() {
  _has_bits_[0] |= 0x00000001u;
  return data_label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DrawBodePlot::release_data_label() {
  // @@protoc_insertion_point(field_release:DrawBodePlot.data_label)
  if (!_internal_has_data_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawBodePlot::set_allocated_data_label(std::string* data_label) {
  if (data_label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DrawBodePlot.data_label)
}
inline std::string* DrawBodePlot::unsafe_arena_release_data_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DrawBodePlot.data_label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DrawBodePlot::unsafe_arena_set_allocated_data_label(
    std::string* data_label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data_label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data_label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DrawBodePlot.data_label)
}

// repeated float data_freq = 3 [packed = true];
inline int DrawBodePlot::_internal_data_freq_size() const {
  return data_freq_.size();
}
inline int DrawBodePlot::data_freq_size() const {
  return _internal_data_freq_size();
}
inline void DrawBodePlot::clear_data_freq() {
  data_freq_.Clear();
}
inline float DrawBodePlot::_internal_data_freq(int index) const {
  return data_freq_.Get(index);
}
inline float DrawBodePlot::data_freq(int index) const {
  // @@protoc_insertion_point(field_get:DrawBodePlot.data_freq)
  return _internal_data_freq(index);
}
inline void DrawBodePlot::set_data_freq(int index, float value) {
  data_freq_.Set(index, value);
  // @@protoc_insertion_point(field_set:DrawBodePlot.data_freq)
}
inline void DrawBodePlot::_internal_add_data_freq(float value) {
  data_freq_.Add(value);
}
inline void DrawBodePlot::add_data_freq(float value) {
  _internal_add_data_freq(value);
  // @@protoc_insertion_point(field_add:DrawBodePlot.data_freq)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DrawBodePlot::_internal_data_freq() const {
  return data_freq_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DrawBodePlot::data_freq() const {
  // @@protoc_insertion_point(field_list:DrawBodePlot.data_freq)
  return _internal_data_freq();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DrawBodePlot::_internal_mutable_data_freq() {
  return &data_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DrawBodePlot::mutable_data_freq() {
  // @@protoc_insertion_point(field_mutable_list:DrawBodePlot.data_freq)
  return _internal_mutable_data_freq();
}

// repeated float data_mag = 4 [packed = true];
inline int DrawBodePlot::_internal_data_mag_size() const {
  return data_mag_.size();
}
inline int DrawBodePlot::data_mag_size() const {
  return _internal_data_mag_size();
}
inline void DrawBodePlot::clear_data_mag() {
  data_mag_.Clear();
}
inline float DrawBodePlot::_internal_data_mag(int index) const {
  return data_mag_.Get(index);
}
inline float DrawBodePlot::data_mag(int index) const {
  // @@protoc_insertion_point(field_get:DrawBodePlot.data_mag)
  return _internal_data_mag(index);
}
inline void DrawBodePlot::set_data_mag(int index, float value) {
  data_mag_.Set(index, value);
  // @@protoc_insertion_point(field_set:DrawBodePlot.data_mag)
}
inline void DrawBodePlot::_internal_add_data_mag(float value) {
  data_mag_.Add(value);
}
inline void DrawBodePlot::add_data_mag(float value) {
  _internal_add_data_mag(value);
  // @@protoc_insertion_point(field_add:DrawBodePlot.data_mag)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DrawBodePlot::_internal_data_mag() const {
  return data_mag_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DrawBodePlot::data_mag() const {
  // @@protoc_insertion_point(field_list:DrawBodePlot.data_mag)
  return _internal_data_mag();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DrawBodePlot::_internal_mutable_data_mag() {
  return &data_mag_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DrawBodePlot::mutable_data_mag() {
  // @@protoc_insertion_point(field_mutable_list:DrawBodePlot.data_mag)
  return _internal_mutable_data_mag();
}

// repeated float data_phase = 5 [packed = true];
inline int DrawBodePlot::_internal_data_phase_size() const {
  return data_phase_.size();
}
inline int DrawBodePlot::data_phase_size() const {
  return _internal_data_phase_size();
}
inline void DrawBodePlot::clear_data_phase() {
  data_phase_.Clear();
}
inline float DrawBodePlot::_internal_data_phase(int index) const {
  return data_phase_.Get(index);
}
inline float DrawBodePlot::data_phase(int index) const {
  // @@protoc_insertion_point(field_get:DrawBodePlot.data_phase)
  return _internal_data_phase(index);
}
inline void DrawBodePlot::set_data_phase(int index, float value) {
  data_phase_.Set(index, value);
  // @@protoc_insertion_point(field_set:DrawBodePlot.data_phase)
}
inline void DrawBodePlot::_internal_add_data_phase(float value) {
  data_phase_.Add(value);
}
inline void DrawBodePlot::add_data_phase(float value) {
  _internal_add_data_phase(value);
  // @@protoc_insertion_point(field_add:DrawBodePlot.data_phase)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DrawBodePlot::_internal_data_phase() const {
  return data_phase_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DrawBodePlot::data_phase() const {
  // @@protoc_insertion_point(field_list:DrawBodePlot.data_phase)
  return _internal_data_phase();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DrawBodePlot::_internal_mutable_data_phase() {
  return &data_phase_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DrawBodePlot::mutable_data_phase() {
  // @@protoc_insertion_point(field_mutable_list:DrawBodePlot.data_phase)
  return _internal_mutable_data_phase();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DrawBodePlot_2eproto
